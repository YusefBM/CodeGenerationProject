package CodeGenerationLanguaage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class Module_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("################################ MODEL CLASSES ################################");
    tgs.newLine();
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.components$EJAO))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.DomainObject$Rd)) {
        tgs.appendNode(elem);
        tgs.newLine();
        tgs.newLine();
      }
    }

    tgs.append("################################ PERSISTENCE CLASSES ################################");
    tgs.newLine();

    // asumo que solo vamos a crear un module, si no, habria que ver como hacer para tener una unica interfaz generica DAO
    tgs.append("package ");
    if (ListSequence.fromList(SNodeOperations.getNodeAncestors(ctx.getPrimaryInput(), null, false)).isNotEmpty()) {
      tgs.append(SPropertyOperations.getString(SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Module$FI, false, false), PROPS.name$MnvL));
      tgs.append(".persistence;");
    } else {
      tgs.append("persistence;");
      tgs.newLine();
      tgs.newLine();
    }

    tgs.append("import java.util.Set;");
    tgs.newLine();
    tgs.append("import java.util.Optional;");
    tgs.newLine();
    tgs.newLine();

    tgs.append("public interface DAO<T, K> {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("Optional<T> findById(K id);");
    tgs.newLine();
    tgs.indent();
    tgs.append("void save(T t);");
    tgs.newLine();
    tgs.indent();
    tgs.append("void update(T t);");
    tgs.newLine();
    tgs.indent();
    tgs.append("void delete(T t);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();
    tgs.newLine();

    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.components$EJAO))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.DAO$m8)) {
        tgs.appendNode(elem);
        tgs.newLine();
        tgs.newLine();
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DomainObject$Rd = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4a8L, "CodeGenerationLanguaage.structure.DomainObject");
    /*package*/ static final SConcept Module$FI = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eab8a8900L, "CodeGenerationLanguaage.structure.Module");
    /*package*/ static final SConcept DAO$m8 = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eac0f4b33L, "CodeGenerationLanguaage.structure.DAO");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$EJAO = MetaAdapterFactory.getContainmentLink(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eab8a8900L, 0x255c2eab8a8901L, "components");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
