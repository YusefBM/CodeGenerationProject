package CodeGenerationLanguaage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import CodeGenerationLanguaage.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Attribute:
        return new Attribute_TextGen();
      case LanguageConceptSwitch.Boolean:
        return new Boolean_TextGen();
      case LanguageConceptSwitch.CollectionType:
        return new CollectionType_TextGen();
      case LanguageConceptSwitch.DAO:
        return new DAO_TextGen();
      case LanguageConceptSwitch.DomainObject:
        return new DomainObject_TextGen();
      case LanguageConceptSwitch.Double:
        return new Double_TextGen();
      case LanguageConceptSwitch.Float:
        return new Float_TextGen();
      case LanguageConceptSwitch.Integer:
        return new Integer_TextGen();
      case LanguageConceptSwitch.Module:
        return new Module_TextGen();
      case LanguageConceptSwitch.Relationship:
        return new Relationship_TextGen();
      case LanguageConceptSwitch.String:
        return new String_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.DomainObject$Rd)) {
        String fname = getFileName_DomainObject(root);
        String ext = getFileExtension_DomainObject(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.Module$FI)) {
        String fname = getFileName_Module(root);
        String ext = getFileExtension_Module(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_DomainObject(SNode node) {
    return SPropertyOperations.getString(node, PROPS.name$MnvL);
  }
  private static String getFileName_Module(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_DomainObject(SNode node) {
    return "java";
  }
  private static String getFileExtension_Module(SNode node) {
    return null;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DomainObject$Rd = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4a8L, "CodeGenerationLanguaage.structure.DomainObject");
    /*package*/ static final SConcept Module$FI = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eab8a8900L, "CodeGenerationLanguaage.structure.Module");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
