package CodeGenerationLanguaage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Attribute_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CollectionType_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new DAO_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DAOReference_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Entity_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Module_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new PrimitiveType_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Relationship_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Repository_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ValueObject_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("CodeGenerationLanguaage.editor.DummyForGrammarCells".equals(editorComponentId)) {
      return Collections.singletonList(new DummyForGrammarCells());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new template_GrammarCellsSideTransformationsMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Attribute());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Boolean());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_CollectionType());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DAO());
      case 4:
        return Arrays.asList(new SubstituteMenu[]{new DAOReference_SubstituteMenu(), new GrammarCellsSubstituteMenu_DAOReference()});
      case 5:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DomainObject());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_DomainObjectComponent());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Double());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Entity());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Float());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Integer());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_List());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Module());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ModuleComponent());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_PrimitiveType());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Relationship());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Repository());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Service());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Set());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_String());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Type());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_ValueObject());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b8L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa2afa84L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eac0f4b33L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eac1cf42dL), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa117514L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eab8a8900L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b0L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad11a37L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eabff1816L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eabfa8cbcL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b8L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa4edcbbL), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa2afa84L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eac0f4b33L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eac1cf42dL), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4a8L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad371a8L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa4edc6eL), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa117514L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa4edc23L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4afL), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa2afa83L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eab8a8900L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eac0f4adfL), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b0L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad11a37L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eabff1816L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eac0f4ae2L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa5f9e38L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa28855bL), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b3L), MetaIdFactory.conceptId(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eabfa8cbcL)).seal();
}
