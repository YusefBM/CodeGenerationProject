package CodeGenerationLanguaage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import CodeGenerationLanguaage.behavior.Attribute__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_Entity_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Entity_NonTypesystemRule() {
  }
  public void applyRule(final SNode entity, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    boolean existsKey = false;
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(entity, LINKS.components$3sCt))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.Attribute$eC) && (boolean) Attribute__BehaviorDescriptor.isBusinessKey_id_n2UEK1dU.invoke(SNodeOperations.as(elem, CONCEPTS.Attribute$eC))) {
        existsKey = true;
      }
    }
    if (!(existsKey)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(entity, "An entity must have one key at least", "r:bf6effea-d744-4346-a7ab-dbe83af3352a(CodeGenerationLanguaage.typesystem)", "10515929641680523", null, errorTarget);
      }
    }

    Set<String> componentsNameSet = SetSequence.fromSet(new HashSet<String>());
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(entity, LINKS.components$3sCt))) {
      if (SetSequence.fromSet(componentsNameSet).contains(SPropertyOperations.getString(elem, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(elem, "Property " + SPropertyOperations.getString(elem, PROPS.name$MnvL) + " is duplicated", "r:bf6effea-d744-4346-a7ab-dbe83af3352a(CodeGenerationLanguaage.typesystem)", "10515929650035044", null, errorTarget);
        }
      } else {
        SetSequence.fromSet(componentsNameSet).addElement(SPropertyOperations.getString(elem, PROPS.name$MnvL));
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Entity$EJ;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Attribute$eC = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b8L, "CodeGenerationLanguaage.structure.Attribute");
    /*package*/ static final SConcept Entity$EJ = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa117514L, "CodeGenerationLanguaage.structure.Entity");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$3sCt = MetaAdapterFactory.getContainmentLink(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4a8L, 0x255c2eaa12d4bdL, "components");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
