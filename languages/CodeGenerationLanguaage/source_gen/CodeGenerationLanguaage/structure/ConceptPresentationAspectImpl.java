package CodeGenerationLanguaage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_Boolean;
  private ConceptPresentation props_CollectionType;
  private ConceptPresentation props_DAO;
  private ConceptPresentation props_DAOReference;
  private ConceptPresentation props_DomainObject;
  private ConceptPresentation props_DomainObjectComponent;
  private ConceptPresentation props_Double;
  private ConceptPresentation props_Entity;
  private ConceptPresentation props_Float;
  private ConceptPresentation props_Integer;
  private ConceptPresentation props_List;
  private ConceptPresentation props_Module;
  private ConceptPresentation props_ModuleComponent;
  private ConceptPresentation props_PrimitiveType;
  private ConceptPresentation props_Relationship;
  private ConceptPresentation props_Repository;
  private ConceptPresentation props_Service;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_String;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_ValueObject;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.Boolean:
        if (props_Boolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Boolean = cpb.create();
        }
        return props_Boolean;
      case LanguageConceptSwitch.CollectionType:
        if (props_CollectionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CollectionType = cpb.create();
        }
        return props_CollectionType;
      case LanguageConceptSwitch.DAO:
        if (props_DAO == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DAO = cpb.create();
        }
        return props_DAO;
      case LanguageConceptSwitch.DAOReference:
        if (props_DAOReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DAOReference = cpb.create();
        }
        return props_DAOReference;
      case LanguageConceptSwitch.DomainObject:
        if (props_DomainObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DomainObject = cpb.create();
        }
        return props_DomainObject;
      case LanguageConceptSwitch.DomainObjectComponent:
        if (props_DomainObjectComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DomainObjectComponent = cpb.create();
        }
        return props_DomainObjectComponent;
      case LanguageConceptSwitch.Double:
        if (props_Double == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Double = cpb.create();
        }
        return props_Double;
      case LanguageConceptSwitch.Entity:
        if (props_Entity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Entity = cpb.create();
        }
        return props_Entity;
      case LanguageConceptSwitch.Float:
        if (props_Float == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Float = cpb.create();
        }
        return props_Float;
      case LanguageConceptSwitch.Integer:
        if (props_Integer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Integer = cpb.create();
        }
        return props_Integer;
      case LanguageConceptSwitch.List:
        if (props_List == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_List = cpb.create();
        }
        return props_List;
      case LanguageConceptSwitch.Module:
        if (props_Module == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Module = cpb.create();
        }
        return props_Module;
      case LanguageConceptSwitch.ModuleComponent:
        if (props_ModuleComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ModuleComponent = cpb.create();
        }
        return props_ModuleComponent;
      case LanguageConceptSwitch.PrimitiveType:
        if (props_PrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PrimitiveType = cpb.create();
        }
        return props_PrimitiveType;
      case LanguageConceptSwitch.Relationship:
        if (props_Relationship == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Relationship = cpb.create();
        }
        return props_Relationship;
      case LanguageConceptSwitch.Repository:
        if (props_Repository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Repository = cpb.create();
        }
        return props_Repository;
      case LanguageConceptSwitch.Service:
        if (props_Service == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Service = cpb.create();
        }
        return props_Service;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.String:
        if (props_String == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_String = cpb.create();
        }
        return props_String;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.ValueObject:
        if (props_ValueObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ValueObject = cpb.create();
        }
        return props_ValueObject;
    }
    return null;
  }
}
