package CodeGenerationLanguaage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Relationship__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad11a37L, "CodeGenerationLanguaage.structure.Relationship");

  public static final SMethod<String> getType_id_n2UFf4Cb = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getType").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UFf4Cb").build();
  public static final SMethod<Boolean> isCollection_id_n2UEXrwB = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isCollection").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UEXrwB").build();
  public static final SMethod<Boolean> isList_id_n2UF9kIx = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isList").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UF9kIx").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getType_id_n2UFf4Cb, isCollection_id_n2UEXrwB, isList_id_n2UF9kIx);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getType_id_n2UFf4Cb(@NotNull SNode __thisNode__) {
    if (((boolean) DomainObjectComponent__BehaviorDescriptor.isCollection_id_n2UEXrwB.invoke(__thisNode__))) {
      return "List<" + SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.target$insn), PROPS.name$MnvL) + ">";
    } else {
      return SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.target$insn), PROPS.name$MnvL);
    }
  }
  /*package*/ static boolean isCollection_id_n2UEXrwB(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getEnum(__thisNode__, PROPS.cardinality$mAAf).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad15e5bL, "CodeGenerationLanguaage.structure.Cardinality"), 0x255c2eaad15e60L, "_0_n")) || SPropertyOperations.getEnum(__thisNode__, PROPS.cardinality$mAAf).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad15e5bL, "CodeGenerationLanguaage.structure.Cardinality"), 0x255c2eaad15e64L, "_1_n"));
  }
  /*package*/ static boolean isList_id_n2UF9kIx(@NotNull SNode __thisNode__) {
    return ((boolean) DomainObjectComponent__BehaviorDescriptor.isCollection_id_n2UEXrwB.invoke(__thisNode__));
  }

  /*package*/ Relationship__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getType_id_n2UFf4Cb(node));
      case 1:
        return (T) ((Boolean) isCollection_id_n2UEXrwB(node));
      case 2:
        return (T) ((Boolean) isList_id_n2UF9kIx(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink target$insn = MetaAdapterFactory.getReferenceLink(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad11a37L, 0x255c2eaad11a3bL, "target");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty cardinality$mAAf = MetaAdapterFactory.getProperty(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad11a37L, 0x255c2eaad15e6fL, "cardinality");
  }
}
