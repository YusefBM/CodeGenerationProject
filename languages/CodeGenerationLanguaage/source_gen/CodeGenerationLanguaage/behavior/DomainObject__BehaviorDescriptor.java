package CodeGenerationLanguaage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Set;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class DomainObject__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4a8L, "CodeGenerationLanguaage.structure.DomainObject");

  public static final SMethod<String> getName_id_n2UG2Yyz = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UG2Yyz").build();
  public static final SMethod<SNode> getPrimaryKeyType_id_n2UGq_9d = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getPrimaryKeyType").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UGq_9d").build();
  public static final SMethod<Set<SNode>> getAttributesPrimitives_id_n2UErbJA = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getAttributesPrimitives").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UErbJA").build();
  public static final SMethod<Set<SNode>> getAttributes_id_n2UGGOIx = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getAttributes").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UGGOIx").build();
  public static final SMethod<Set<SNode>> getAttributesCollectionType_id_n2UGP4CJ = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getAttributesCollectionType").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UGP4CJ").build();
  public static final SMethod<Set<SNode>> getRelationships_id_n2UGGPVH = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getRelationships").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UGGPVH").build();
  public static final SMethod<Set<SNode>> getRelationshipsManyCardinality_id_n2UGV4EI = new SMethodBuilder<Set<SNode>>(new SJavaCompoundTypeImpl((Class<Set<SNode>>) ((Class) Object.class))).name("getRelationshipsManyCardinality").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UGV4EI").build();
  public static final SMethod<Boolean> containsCollection_id_n2UEXg41 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("containsCollection").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("_n2UEXg41").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getName_id_n2UG2Yyz, getPrimaryKeyType_id_n2UGq_9d, getAttributesPrimitives_id_n2UErbJA, getAttributes_id_n2UGGOIx, getAttributesCollectionType_id_n2UGP4CJ, getRelationships_id_n2UGGPVH, getRelationshipsManyCardinality_id_n2UGV4EI, containsCollection_id_n2UEXg41);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getName_id_n2UG2Yyz(@NotNull SNode __thisNode__) {
    return SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL);
  }
  /*package*/ static SNode getPrimaryKeyType_id_n2UGq_9d(@NotNull SNode __thisNode__) {
    return (SNode) Attribute__BehaviorDescriptor.getType_id_n2UGtFXv.invoke(SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$3sCt)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.Attribute$eC) && (boolean) Attribute__BehaviorDescriptor.isPrimaryKey_id_n2UGc7fk.invoke(SNodeOperations.as(it, CONCEPTS.Attribute$eC));
      }
    }), CONCEPTS.Attribute$eC));
  }
  /*package*/ static Set<SNode> getAttributesPrimitives_id_n2UErbJA(@NotNull SNode __thisNode__) {
    Set<SNode> attributes = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$3sCt))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.Attribute$eC) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(elem, CONCEPTS.Attribute$eC), LINKS.type$3xxQ), CONCEPTS.PrimitiveType$5g)) {
        SetSequence.fromSet(attributes).addElement(SNodeOperations.as(elem, CONCEPTS.Attribute$eC));
      }
    }
    return attributes;
  }
  /*package*/ static Set<SNode> getAttributes_id_n2UGGOIx(@NotNull SNode __thisNode__) {
    Set<SNode> attributes = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$3sCt))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.Attribute$eC)) {
        SetSequence.fromSet(attributes).addElement(SNodeOperations.as(elem, CONCEPTS.Attribute$eC));
      }
    }
    return attributes;
  }
  /*package*/ static Set<SNode> getAttributesCollectionType_id_n2UGP4CJ(@NotNull SNode __thisNode__) {
    Set<SNode> attributes = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$3sCt))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.Attribute$eC) && (boolean) DomainObjectComponent__BehaviorDescriptor.isCollection_id_n2UEXrwB.invoke(SNodeOperations.as(elem, CONCEPTS.Attribute$eC))) {
        SetSequence.fromSet(attributes).addElement(SNodeOperations.as(elem, CONCEPTS.Attribute$eC));
      }
    }
    return attributes;
  }
  /*package*/ static Set<SNode> getRelationships_id_n2UGGPVH(@NotNull SNode __thisNode__) {
    Set<SNode> relationships = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$3sCt))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.Relationship$TZ)) {
        SetSequence.fromSet(relationships).addElement(SNodeOperations.as(elem, CONCEPTS.Relationship$TZ));
      }
    }
    return relationships;
  }
  /*package*/ static Set<SNode> getRelationshipsManyCardinality_id_n2UGV4EI(@NotNull SNode __thisNode__) {
    Set<SNode> relationships = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$3sCt))) {
      if (SNodeOperations.isInstanceOf(elem, CONCEPTS.Relationship$TZ) && (boolean) DomainObjectComponent__BehaviorDescriptor.isCollection_id_n2UEXrwB.invoke(SNodeOperations.as(elem, CONCEPTS.Relationship$TZ))) {
        SetSequence.fromSet(relationships).addElement(SNodeOperations.as(elem, CONCEPTS.Relationship$TZ));
      }
    }
    return relationships;
  }
  /*package*/ static boolean containsCollection_id_n2UEXg41(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.components$3sCt)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) DomainObjectComponent__BehaviorDescriptor.isCollection_id_n2UEXrwB.invoke(it);
      }
    });
  }

  /*package*/ DomainObject__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getName_id_n2UG2Yyz(node));
      case 1:
        return (T) ((SNode) getPrimaryKeyType_id_n2UGq_9d(node));
      case 2:
        return (T) ((Set<SNode>) getAttributesPrimitives_id_n2UErbJA(node));
      case 3:
        return (T) ((Set<SNode>) getAttributes_id_n2UGGOIx(node));
      case 4:
        return (T) ((Set<SNode>) getAttributesCollectionType_id_n2UGP4CJ(node));
      case 5:
        return (T) ((Set<SNode>) getRelationships_id_n2UGGPVH(node));
      case 6:
        return (T) ((Set<SNode>) getRelationshipsManyCardinality_id_n2UGV4EI(node));
      case 7:
        return (T) ((Boolean) containsCollection_id_n2UEXg41(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink components$3sCt = MetaAdapterFactory.getContainmentLink(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4a8L, 0x255c2eaa12d4bdL, "components");
    /*package*/ static final SContainmentLink type$3xxQ = MetaAdapterFactory.getContainmentLink(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b8L, 0x255c2eaa12d4bbL, "type");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Attribute$eC = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b8L, "CodeGenerationLanguaage.structure.Attribute");
    /*package*/ static final SConcept PrimitiveType$5g = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaa12d4b0L, "CodeGenerationLanguaage.structure.PrimitiveType");
    /*package*/ static final SConcept Relationship$TZ = MetaAdapterFactory.getConcept(0x46855889559641f7L, 0x9277402e4fbfedc8L, 0x255c2eaad11a37L, "CodeGenerationLanguaage.structure.Relationship");
  }
}
